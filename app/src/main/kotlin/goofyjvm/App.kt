/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package goofyjvm

import goofyjvm.transformer.Transformer
import org.objectweb.asm.tree.ClassNode
import org.objectweb.asm.ClassReader
import org.objectweb.asm.ClassWriter
import java.io.File
import java.io.FileOutputStream
import java.net.URL
import java.nio.file.Files
import java.nio.file.Paths
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipOutputStream

const val platform = "x64_windows"
const val version = "8u345"
const val subver = "b01"

fun downloadJDK() {
    val jdkFile = File("goofy_jdk_tmp.zip")
    jdkFile.deleteOnExit()

    val downloadLink = "https://github.com/adoptium/temurin8-binaries/releases/download/jdk${version}-${subver}/OpenJDK8U-jdk_${platform}_hotspot_${version}${subver}.zip"
    val url = URL(downloadLink)
    val conn = url.openConnection()
    conn.addRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:105.0) Gecko/20100101 Firefox/105.0")

    val stream = url.openStream()
    println("Downloading jdk...")
    val bytes = stream.readBytes()
    val fos = FileOutputStream(jdkFile)

    println("Writing jdk to disk...")
    fos.write(bytes)
    fos.close()

    println("Unpacking...")
    val jdkZip = ZipFile(jdkFile)
    val entries = jdkZip.entries()

    while (entries.hasMoreElements()) {
        val next = entries.nextElement()
        val name = next.name.subSequence("jdk${version}-$subver/".length, next.name.length).toString()
        val outFile = File("goofyjvm/$name").absoluteFile
        if (!outFile.parentFile.exists()) {
            outFile.parentFile.mkdirs()
        }

        if (next.isDirectory) continue
        val outFS = FileOutputStream(outFile)
        outFS.write(jdkZip.getInputStream(next).readBytes())
        outFS.close()
    }

    println("Backing up rt.jar")
    Files.copy(Paths.get("goofyjvm", "jre", "lib", "rt.jar"), Paths.get("goofyjvm", "jre", "lib", "rt.jar.bak"))

    println("Cleaning up...")
    jdkFile.delete()
}

fun main() {
    val jdkFolder = File("goofyjvm")
    if (!jdkFolder.exists()) {
       jdkFolder.mkdir()
        downloadJDK()
    }

    val bak = ZipFile("goofyjvm/jre/lib/rt.jar.bak")
    val entries = bak.entries()
    val zos = ZipOutputStream(FileOutputStream("goofyjvm/jre/lib/rt.jar"))

    println("Processing classes, this *might* take a while")
    while (entries.hasMoreElements()) {
        val next = entries.nextElement()
        if (next.isDirectory) continue

        zos.putNextEntry(ZipEntry(next.name))
        var bytes = bak.getInputStream(next).readBytes()

        try {
            if (next.name.endsWith(".class")) {
                val cr = ClassReader(bytes)
                val node = ClassNode()
                cr.accept(node, ClassReader.EXPAND_FRAMES)

                for (transformer in Transformer.transformers) {
                    transformer.transform(node)
                }

                val cw = ClassWriter(ClassWriter.COMPUTE_MAXS or ClassWriter.COMPUTE_FRAMES)
                node.accept(cw)
                bytes = cw.toByteArray()
            }
        } catch (ignored: Exception) {

        }

        zos.write(bytes)
        zos.closeEntry()
    }
    println("Writing jar...")

    zos.close()
    println("Done!")
}
